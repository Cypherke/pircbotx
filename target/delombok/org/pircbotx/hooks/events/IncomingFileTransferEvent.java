// Generated by delombok at Sun Jul 12 21:25:30 UTC 2015
/**
 * Copyright (C) 2010-2014 Leon Blakey <lord.quackstar at gmail.com>
 *
 * This file is part of PircBotX.
 *
 * PircBotX is free software: you can redistribute it and/or modify it under the
 * terms of the GNU General Public License as published by the Free Software
 * Foundation, either version 3 of the License, or (at your option) any later
 * version.
 *
 * PircBotX is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE. See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with
 * PircBotX. If not, see <http://www.gnu.org/licenses/>.
 */
package org.pircbotx.hooks.events;

import java.io.File;
import java.io.IOException;
import java.net.InetAddress;
import javax.annotation.Nullable;
import lombok.NonNull;
import org.pircbotx.hooks.Event;
import org.pircbotx.PircBotX;
import org.pircbotx.User;
import org.pircbotx.UserHostmask;
import org.pircbotx.dcc.FileTransfer;
import org.pircbotx.dcc.ReceiveFileTransfer;
import org.pircbotx.hooks.Listener;
import org.pircbotx.hooks.types.GenericDCCEvent;

/**
 * This event is dispatched whenever a DCC SEND request is sent to the PircBotX.
 * This means that a client has requested to send a file to us. By default there
 * are no {@link Listener listeners} for this event, which means that all DCC
 * SEND requests will be ignored by default. If you wish to receive the file,
 * then you must listen for this event and call the receive method on the
 * DccFileTransfer object, which connects to the sender and downloads the file.
 * <p>
 * Example:
 * <pre>
 * DccFileTransfer transfer = event.getTransfer();
 * // Use the suggested file name.
 * File file = transfer.getFile();
 * // Receive the transfer and save it to the file, allowing resuming.
 * transfer.receive(file, true);
 * </pre>
 * <p>
 * <b>Warning:</b> Receiving an incoming file transfer will cause a file to be
 * written to disk. Please ensure that you make adequate security checks so that
 * this file does not overwrite anything important!
 * <p>
 * If you allow resuming and the file already partly exists, it will be appended
 * to instead of overwritten. If resuming is not enabled, the file will be
 * overwritten if it already exists.
 *
 * @author Leon Blakey
 * @see FileTransfer
 */
public class IncomingFileTransferEvent extends Event implements GenericDCCEvent {
	protected final User user;
	protected final UserHostmask userHostmask;
	protected final String rawFilename;
	protected final String safeFilename;
	protected final InetAddress address;
	protected final int port;
	protected final long filesize;
	protected final String token;
	protected final boolean passive;

	public IncomingFileTransferEvent(PircBotX bot, @NonNull UserHostmask userHostmask, User user, @NonNull String rawFilename, @NonNull String safeFilename, @NonNull InetAddress address, int port, long filesize, String token, boolean passive) {
		super(bot);
		if (userHostmask == null) {
			throw new java.lang.NullPointerException("userHostmask");
		}
		if (rawFilename == null) {
			throw new java.lang.NullPointerException("rawFilename");
		}
		if (safeFilename == null) {
			throw new java.lang.NullPointerException("safeFilename");
		}
		if (address == null) {
			throw new java.lang.NullPointerException("address");
		}
		this.user = user;
		this.userHostmask = userHostmask;
		this.rawFilename = rawFilename;
		this.safeFilename = safeFilename;
		this.address = address;
		this.port = port;
		this.filesize = filesize;
		this.token = token;
		this.passive = passive;
	}

	/**
	 * @deprecated Use {@link #getToken() } from {@link GenericDCCEvent}
	 * interface
	 */
	@Deprecated
	public String getTransferToken() {
		return getToken();
	}

	public ReceiveFileTransfer accept(@NonNull File destination) throws IOException {
		if (destination == null) {
			throw new java.lang.NullPointerException("destination");
		}
		return getBot().getDccHandler().acceptFileTransfer(this, destination);
	}

	public ReceiveFileTransfer acceptResume(@NonNull File destination, long startPosition) throws IOException, InterruptedException {
		if (destination == null) {
			throw new java.lang.NullPointerException("destination");
		}
		return getBot().getDccHandler().acceptFileTransferResume(this, destination, startPosition);
	}

	/**
	 * Accept the request and transfer the file now, blocking until finished.
	 *
	 * @param destination
	 * @throws IOException
	 */
	public ReceiveFileTransfer acceptAndTransfer(File destination) throws IOException {
		ReceiveFileTransfer transfer = accept(destination);
		transfer.transfer();
		return transfer;
	}

	/**
	 * Accept the resume request and transfer the file now, blocking until
	 * finished.
	 *
	 * @param destination
	 * @throws IOException
	 */
	public ReceiveFileTransfer acceptResumeAndTransfer(File destination, long startPosition) throws IOException, InterruptedException {
		ReceiveFileTransfer transfer = acceptResume(destination, startPosition);
		transfer.transfer();
		return transfer;
	}

	/**
	 * Respond with a <i>private message</i> to the user that sent the request
	 *
	 * @param response The response to send
	 */
	@Override
	public void respond(String response) {
		getUser().send().message(response);
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public String getRawFilename() {
		return this.rawFilename;
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public String getSafeFilename() {
		return this.safeFilename;
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public long getFilesize() {
		return this.filesize;
	}

	@java.lang.Override
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public java.lang.String toString() {
		return "IncomingFileTransferEvent(user=" + this.getUser() + ", userHostmask=" + this.getUserHostmask() + ", rawFilename=" + this.getRawFilename() + ", safeFilename=" + this.getSafeFilename() + ", address=" + this.getAddress() + ", port=" + this.getPort() + ", filesize=" + this.getFilesize() + ", token=" + this.getToken() + ", passive=" + this.isPassive() + ")";
	}

	@java.lang.Override
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public boolean equals(final java.lang.Object o) {
		if (o == this) return true;
		if (!(o instanceof IncomingFileTransferEvent)) return false;
		final IncomingFileTransferEvent other = (IncomingFileTransferEvent)o;
		if (!other.canEqual((java.lang.Object)this)) return false;
		if (!super.equals(o)) return false;
		final java.lang.Object this$user = this.getUser();
		final java.lang.Object other$user = other.getUser();
		if (this$user == null ? other$user != null : !this$user.equals(other$user)) return false;
		final java.lang.Object this$userHostmask = this.getUserHostmask();
		final java.lang.Object other$userHostmask = other.getUserHostmask();
		if (this$userHostmask == null ? other$userHostmask != null : !this$userHostmask.equals(other$userHostmask)) return false;
		final java.lang.Object this$rawFilename = this.getRawFilename();
		final java.lang.Object other$rawFilename = other.getRawFilename();
		if (this$rawFilename == null ? other$rawFilename != null : !this$rawFilename.equals(other$rawFilename)) return false;
		final java.lang.Object this$safeFilename = this.getSafeFilename();
		final java.lang.Object other$safeFilename = other.getSafeFilename();
		if (this$safeFilename == null ? other$safeFilename != null : !this$safeFilename.equals(other$safeFilename)) return false;
		final java.lang.Object this$address = this.getAddress();
		final java.lang.Object other$address = other.getAddress();
		if (this$address == null ? other$address != null : !this$address.equals(other$address)) return false;
		if (this.getPort() != other.getPort()) return false;
		if (this.getFilesize() != other.getFilesize()) return false;
		final java.lang.Object this$token = this.getToken();
		final java.lang.Object other$token = other.getToken();
		if (this$token == null ? other$token != null : !this$token.equals(other$token)) return false;
		if (this.isPassive() != other.isPassive()) return false;
		return true;
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	protected boolean canEqual(final java.lang.Object other) {
		return other instanceof IncomingFileTransferEvent;
	}

	@java.lang.Override
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public int hashCode() {
		final int PRIME = 59;
		int result = 1;
		result = result * PRIME + super.hashCode();
		final java.lang.Object $user = this.getUser();
		result = result * PRIME + ($user == null ? 0 : $user.hashCode());
		final java.lang.Object $userHostmask = this.getUserHostmask();
		result = result * PRIME + ($userHostmask == null ? 0 : $userHostmask.hashCode());
		final java.lang.Object $rawFilename = this.getRawFilename();
		result = result * PRIME + ($rawFilename == null ? 0 : $rawFilename.hashCode());
		final java.lang.Object $safeFilename = this.getSafeFilename();
		result = result * PRIME + ($safeFilename == null ? 0 : $safeFilename.hashCode());
		final java.lang.Object $address = this.getAddress();
		result = result * PRIME + ($address == null ? 0 : $address.hashCode());
		result = result * PRIME + this.getPort();
		final long $filesize = this.getFilesize();
		result = result * PRIME + (int)($filesize >>> 32 ^ $filesize);
		final java.lang.Object $token = this.getToken();
		result = result * PRIME + ($token == null ? 0 : $token.hashCode());
		result = result * PRIME + (this.isPassive() ? 79 : 97);
		return result;
	}

	@Override
	@Nullable
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public User getUser() {
		return this.user;
	}

	@Override
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public UserHostmask getUserHostmask() {
		return this.userHostmask;
	}

	@Override
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public InetAddress getAddress() {
		return this.address;
	}

	@Override
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public int getPort() {
		return this.port;
	}

	@Override
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public String getToken() {
		return this.token;
	}

	@Override
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public boolean isPassive() {
		return this.passive;
	}
}