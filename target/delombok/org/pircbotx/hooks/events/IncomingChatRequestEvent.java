// Generated by delombok at Sun Jul 12 21:25:30 UTC 2015
/**
 * Copyright (C) 2010-2014 Leon Blakey <lord.quackstar at gmail.com>
 *
 * This file is part of PircBotX.
 *
 * PircBotX is free software: you can redistribute it and/or modify it under the
 * terms of the GNU General Public License as published by the Free Software
 * Foundation, either version 3 of the License, or (at your option) any later
 * version.
 *
 * PircBotX is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE. See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with
 * PircBotX. If not, see <http://www.gnu.org/licenses/>.
 */
package org.pircbotx.hooks.events;

import java.io.IOException;
import java.net.InetAddress;
import javax.annotation.Nullable;
import lombok.NonNull;
import org.pircbotx.hooks.Event;
import org.pircbotx.PircBotX;
import org.pircbotx.User;
import org.pircbotx.UserHostmask;
import org.pircbotx.dcc.ReceiveChat;
import org.pircbotx.hooks.Listener;
import org.pircbotx.hooks.types.GenericDCCEvent;

/**
 * This event will be dispatched whenever a DCC Chat request is received. This
 * means that a client has requested to chat to us directly rather than via the
 * IRC server. This is useful for sending many lines of text to and from the bot
 * without having to worry about flooding the server or any operators of the
 * server being able to "spy" on what is being said. By default there are no
 * {@link Listener} for this event, which means that all DCC CHAT requests will
 * be ignored by default.
 * <p>
 * If you wish to accept the connection, then you listen for this event and call
 * the {@link #accept() } method, which connects to the sender of the chat
 * request and allows lines to be sent to and from the bot.
 * <p>
 * Your bot must be able to connect directly to the user that sent the request.
 * <p>
 * Example:
 * <pre>
 * // Accept all chat, whoever it's from.
 * ReceiveChat chat = event.accept();
 * chat.sendLine("Hello");
 * String response = chat.readLine();
 * chat.close();
 * </pre>
 *
 * @author Leon Blakey
 */
public class IncomingChatRequestEvent extends Event implements GenericDCCEvent {
	protected final User user;
	protected final UserHostmask userHostmask;
	protected final InetAddress address;
	protected final int port;
	protected final String token;
	protected final boolean passive;

	public IncomingChatRequestEvent(PircBotX bot, @NonNull UserHostmask userHostmask, User user, @NonNull InetAddress address, int port, String token, boolean passive) {
		super(bot);
		if (userHostmask == null) {
			throw new java.lang.NullPointerException("userHostmask");
		}
		if (address == null) {
			throw new java.lang.NullPointerException("address");
		}
		this.user = user;
		this.userHostmask = userHostmask;
		this.address = address;
		this.port = port;
		this.token = token;
		this.passive = passive;
	}

	public ReceiveChat accept() throws IOException {
		return getBot().getDccHandler().acceptChatRequest(this);
	}

	/**
	 * @deprecated Use {@link #getAddress() } from {@link GenericDCCEvent}
	 * interface
	 */
	@Deprecated
	public InetAddress getChatAddress() {
		return getAddress();
	}

	/**
	 * @deprecated Use {@link #getPort() } from {@link GenericDCCEvent}
	 * interface
	 */
	@Deprecated
	public int getChatPort() {
		return getPort();
	}

	/**
	 * @deprecated Use {@link #getToken() } from {@link GenericDCCEvent}
	 * interface
	 */
	@Deprecated
	public String getChatToken() {
		return getToken();
	}

	/**
	 * Respond with a <i>private message</i> to the user that sent the request,
	 * <b>not a message over dcc</b> since it might not of been accepted yet
	 *
	 * @param response The response to send
	 */
	@Override
	public void respond(String response) {
		getUser().send().message(response);
	}

	@java.lang.Override
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public java.lang.String toString() {
		return "IncomingChatRequestEvent(user=" + this.getUser() + ", userHostmask=" + this.getUserHostmask() + ", address=" + this.getAddress() + ", port=" + this.getPort() + ", token=" + this.getToken() + ", passive=" + this.isPassive() + ")";
	}

	@java.lang.Override
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public boolean equals(final java.lang.Object o) {
		if (o == this) return true;
		if (!(o instanceof IncomingChatRequestEvent)) return false;
		final IncomingChatRequestEvent other = (IncomingChatRequestEvent)o;
		if (!other.canEqual((java.lang.Object)this)) return false;
		if (!super.equals(o)) return false;
		final java.lang.Object this$user = this.getUser();
		final java.lang.Object other$user = other.getUser();
		if (this$user == null ? other$user != null : !this$user.equals(other$user)) return false;
		final java.lang.Object this$userHostmask = this.getUserHostmask();
		final java.lang.Object other$userHostmask = other.getUserHostmask();
		if (this$userHostmask == null ? other$userHostmask != null : !this$userHostmask.equals(other$userHostmask)) return false;
		final java.lang.Object this$address = this.getAddress();
		final java.lang.Object other$address = other.getAddress();
		if (this$address == null ? other$address != null : !this$address.equals(other$address)) return false;
		if (this.getPort() != other.getPort()) return false;
		final java.lang.Object this$token = this.getToken();
		final java.lang.Object other$token = other.getToken();
		if (this$token == null ? other$token != null : !this$token.equals(other$token)) return false;
		if (this.isPassive() != other.isPassive()) return false;
		return true;
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	protected boolean canEqual(final java.lang.Object other) {
		return other instanceof IncomingChatRequestEvent;
	}

	@java.lang.Override
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public int hashCode() {
		final int PRIME = 59;
		int result = 1;
		result = result * PRIME + super.hashCode();
		final java.lang.Object $user = this.getUser();
		result = result * PRIME + ($user == null ? 0 : $user.hashCode());
		final java.lang.Object $userHostmask = this.getUserHostmask();
		result = result * PRIME + ($userHostmask == null ? 0 : $userHostmask.hashCode());
		final java.lang.Object $address = this.getAddress();
		result = result * PRIME + ($address == null ? 0 : $address.hashCode());
		result = result * PRIME + this.getPort();
		final java.lang.Object $token = this.getToken();
		result = result * PRIME + ($token == null ? 0 : $token.hashCode());
		result = result * PRIME + (this.isPassive() ? 79 : 97);
		return result;
	}

	@Override
	@Nullable
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public User getUser() {
		return this.user;
	}

	@Override
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public UserHostmask getUserHostmask() {
		return this.userHostmask;
	}

	@Override
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public InetAddress getAddress() {
		return this.address;
	}

	@Override
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public int getPort() {
		return this.port;
	}

	@Override
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public String getToken() {
		return this.token;
	}

	@Override
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public boolean isPassive() {
		return this.passive;
	}
}