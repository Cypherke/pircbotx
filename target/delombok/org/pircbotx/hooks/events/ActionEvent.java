// Generated by delombok at Sun Jul 12 21:25:30 UTC 2015
/**
 * Copyright (C) 2010-2014 Leon Blakey <lord.quackstar at gmail.com>
 *
 * This file is part of PircBotX.
 *
 * PircBotX is free software: you can redistribute it and/or modify it under the
 * terms of the GNU General Public License as published by the Free Software
 * Foundation, either version 3 of the License, or (at your option) any later
 * version.
 *
 * PircBotX is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE. See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with
 * PircBotX. If not, see <http://www.gnu.org/licenses/>.
 */
package org.pircbotx.hooks.events;

import javax.annotation.Nullable;
import lombok.NonNull;
import org.pircbotx.Channel;
import org.pircbotx.PircBotX;
import org.pircbotx.User;
import org.pircbotx.UserHostmask;
import org.pircbotx.hooks.Event;
import org.pircbotx.hooks.types.GenericChannelUserEvent;
import org.pircbotx.hooks.types.GenericMessageEvent;

/**
 * Called whenever an ACTION is sent from a user. E.g. such events generated by
 * typing "/me goes shopping" in most IRC clients.
 *
 * @author Leon Blakey
 */
public class ActionEvent extends Event implements GenericMessageEvent, GenericChannelUserEvent {
	
	/**
	 * The user hostmask that sent the action.
	 */
	protected final UserHostmask userHostmask;
	
	/**
	 * The user that sent the action.
	 */
	protected final User user;
	
	/**
	 * The channel that the action message was sent in. A value of
	 * <code>null</code> means that this is a private message, not a channel
	 */
	protected final Channel channel;
	
	/**
	 * The raw channel name, could be a special mode message eg +#channel that
	 * only goes to voiced users.
	 */
	protected final String channelSource;
	
	/**
	 * The action message.
	 */
	protected final String action;

	public ActionEvent(PircBotX bot, @NonNull UserHostmask userHostmask, User user, Channel channel, @NonNull String channelSource, @NonNull String action) {
		super(bot);
		if (userHostmask == null) {
			throw new java.lang.NullPointerException("userHostmask");
		}
		if (channelSource == null) {
			throw new java.lang.NullPointerException("channelSource");
		}
		if (action == null) {
			throw new java.lang.NullPointerException("action");
		}
		this.userHostmask = userHostmask;
		this.user = user;
		this.channel = channel;
		this.channelSource = channelSource;
		this.action = action;
	}

	/**
	 * Returns the action sent by the user. Same result as {@link #getAction() }
	 *
	 * @return Action sent by the user
	 */
	@Override
	public String getMessage() {
		return action;
	}

	/**
	 * Respond to an action with an action in either the channel that the
	 * message came from or a private message.
	 * <p>
	 * Example
	 * <pre>
	 * * SomeUser thinks that this is awesome
	 * * PircBotX agrees
	 * </pre>
	 *
	 * @param response The response to send
	 */
	@Override
	public void respond(String response) {
		if (getChannel() == null) getUserHostmask().send().action(response); else getBot().sendIRC().action(channelSource, response);
	}

	/**
	 * Respond with a message to the channel without the prefix
	 *
	 * @param response The response to send
	 */
	public void respondChannel(String response) {
		if (getChannel() == null) throw new RuntimeException("Event does not contain a channel");
		getBot().sendIRC().message(channelSource, response);
	}

	/**
	 * Respond with a PM directly to the user
	 *
	 * @param response The response to send
	 */
	@Override
	public void respondPrivateMessage(String response) {
		getUser().send().message(response);
	}

	/**
	 * The raw channel name, could be a special mode message eg +#channel that
	 * only goes to voiced users.
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public String getChannelSource() {
		return this.channelSource;
	}

	/**
	 * The action message.
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public String getAction() {
		return this.action;
	}

	@java.lang.Override
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public java.lang.String toString() {
		return "ActionEvent(userHostmask=" + this.getUserHostmask() + ", user=" + this.getUser() + ", channel=" + this.getChannel() + ", channelSource=" + this.getChannelSource() + ", action=" + this.getAction() + ")";
	}

	@java.lang.Override
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public boolean equals(final java.lang.Object o) {
		if (o == this) return true;
		if (!(o instanceof ActionEvent)) return false;
		final ActionEvent other = (ActionEvent)o;
		if (!other.canEqual((java.lang.Object)this)) return false;
		if (!super.equals(o)) return false;
		final java.lang.Object this$userHostmask = this.getUserHostmask();
		final java.lang.Object other$userHostmask = other.getUserHostmask();
		if (this$userHostmask == null ? other$userHostmask != null : !this$userHostmask.equals(other$userHostmask)) return false;
		final java.lang.Object this$user = this.getUser();
		final java.lang.Object other$user = other.getUser();
		if (this$user == null ? other$user != null : !this$user.equals(other$user)) return false;
		final java.lang.Object this$channel = this.getChannel();
		final java.lang.Object other$channel = other.getChannel();
		if (this$channel == null ? other$channel != null : !this$channel.equals(other$channel)) return false;
		final java.lang.Object this$channelSource = this.getChannelSource();
		final java.lang.Object other$channelSource = other.getChannelSource();
		if (this$channelSource == null ? other$channelSource != null : !this$channelSource.equals(other$channelSource)) return false;
		final java.lang.Object this$action = this.getAction();
		final java.lang.Object other$action = other.getAction();
		if (this$action == null ? other$action != null : !this$action.equals(other$action)) return false;
		return true;
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	protected boolean canEqual(final java.lang.Object other) {
		return other instanceof ActionEvent;
	}

	@java.lang.Override
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public int hashCode() {
		final int PRIME = 59;
		int result = 1;
		result = result * PRIME + super.hashCode();
		final java.lang.Object $userHostmask = this.getUserHostmask();
		result = result * PRIME + ($userHostmask == null ? 0 : $userHostmask.hashCode());
		final java.lang.Object $user = this.getUser();
		result = result * PRIME + ($user == null ? 0 : $user.hashCode());
		final java.lang.Object $channel = this.getChannel();
		result = result * PRIME + ($channel == null ? 0 : $channel.hashCode());
		final java.lang.Object $channelSource = this.getChannelSource();
		result = result * PRIME + ($channelSource == null ? 0 : $channelSource.hashCode());
		final java.lang.Object $action = this.getAction();
		result = result * PRIME + ($action == null ? 0 : $action.hashCode());
		return result;
	}

	/**
	 * The user hostmask that sent the action.
	 */
	@Override
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public UserHostmask getUserHostmask() {
		return this.userHostmask;
	}

	/**
	 * The user that sent the action.
	 */
	@Override
	@Nullable
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public User getUser() {
		return this.user;
	}

	/**
	 * The channel that the action message was sent in. A value of
	 * <code>null</code> means that this is a private message, not a channel
	 */
	@Override
	@Nullable
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public Channel getChannel() {
		return this.channel;
	}
}