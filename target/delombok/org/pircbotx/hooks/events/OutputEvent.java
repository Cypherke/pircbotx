// Generated by delombok at Sun Jul 12 21:25:30 UTC 2015
/**
 * Copyright (C) 2010-2014 Leon Blakey <lord.quackstar at gmail.com>
 *
 * This file is part of PircBotX.
 *
 * PircBotX is free software: you can redistribute it and/or modify it under the
 * terms of the GNU General Public License as published by the Free Software
 * Foundation, either version 3 of the License, or (at your option) any later
 * version.
 *
 * PircBotX is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE. See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with
 * PircBotX. If not, see <http://www.gnu.org/licenses/>.
 */
package org.pircbotx.hooks.events;

import java.util.List;
import org.pircbotx.PircBotX;
import org.pircbotx.hooks.Event;

/**
 * A command sent to the IRC server from PircBotX
 *
 * @author Leon Blakey
 */
public class OutputEvent extends Event {
	private final String rawLine;
	
	/**
	 * Raw line split into its individual parts
	 *
	 * @see org.pircbotx.Utils#tokenizeLine(java.lang.String)
	 */
	private final List<String> lineParsed;

	public OutputEvent(PircBotX bot, String rawLine, List<String> lineParsed) {
		super(bot);
		this.rawLine = rawLine;
		this.lineParsed = lineParsed;
	}

	/**
	 * @param response
	 * @deprecated Cannot respond to output
	 */
	@Override
	@Deprecated
	public void respond(String response) {
		throw new UnsupportedOperationException("Not supported");
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public String getRawLine() {
		return this.rawLine;
	}

	/**
	 * Raw line split into its individual parts
	 *
	 * @see org.pircbotx.Utils#tokenizeLine(java.lang.String)
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public List<String> getLineParsed() {
		return this.lineParsed;
	}

	@java.lang.Override
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public java.lang.String toString() {
		return "OutputEvent(rawLine=" + this.getRawLine() + ", lineParsed=" + this.getLineParsed() + ")";
	}

	@java.lang.Override
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public boolean equals(final java.lang.Object o) {
		if (o == this) return true;
		if (!(o instanceof OutputEvent)) return false;
		final OutputEvent other = (OutputEvent)o;
		if (!other.canEqual((java.lang.Object)this)) return false;
		if (!super.equals(o)) return false;
		final java.lang.Object this$rawLine = this.getRawLine();
		final java.lang.Object other$rawLine = other.getRawLine();
		if (this$rawLine == null ? other$rawLine != null : !this$rawLine.equals(other$rawLine)) return false;
		final java.lang.Object this$lineParsed = this.getLineParsed();
		final java.lang.Object other$lineParsed = other.getLineParsed();
		if (this$lineParsed == null ? other$lineParsed != null : !this$lineParsed.equals(other$lineParsed)) return false;
		return true;
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	protected boolean canEqual(final java.lang.Object other) {
		return other instanceof OutputEvent;
	}

	@java.lang.Override
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public int hashCode() {
		final int PRIME = 59;
		int result = 1;
		result = result * PRIME + super.hashCode();
		final java.lang.Object $rawLine = this.getRawLine();
		result = result * PRIME + ($rawLine == null ? 0 : $rawLine.hashCode());
		final java.lang.Object $lineParsed = this.getLineParsed();
		result = result * PRIME + ($lineParsed == null ? 0 : $lineParsed.hashCode());
		return result;
	}
}