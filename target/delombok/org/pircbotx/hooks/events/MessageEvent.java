// Generated by delombok at Sun Jul 12 21:25:30 UTC 2015
/**
 * Copyright (C) 2010-2014 Leon Blakey <lord.quackstar at gmail.com>
 *
 * This file is part of PircBotX.
 *
 * PircBotX is free software: you can redistribute it and/or modify it under the
 * terms of the GNU General Public License as published by the Free Software
 * Foundation, either version 3 of the License, or (at your option) any later
 * version.
 *
 * PircBotX is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE. See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with
 * PircBotX. If not, see <http://www.gnu.org/licenses/>.
 */
package org.pircbotx.hooks.events;

import com.google.common.collect.ImmutableMap;
import javax.annotation.Nullable;
import java.util.Map;
import org.pircbotx.Channel;
import org.pircbotx.User;
import lombok.NonNull;
import org.pircbotx.hooks.Event;
import org.pircbotx.PircBotX;
import org.pircbotx.UserHostmask;
import org.pircbotx.hooks.types.GenericChannelUserEvent;
import org.pircbotx.hooks.types.GenericMessageEvent;

/**
 * Used whenever a message is sent to a channel.
 *
 * @author Leon Blakey
 */
public class MessageEvent extends Event implements GenericMessageEvent, GenericChannelUserEvent {
	
	/**
	 * The channel to which the message was sent.
	 */
	protected final Channel channel;
	
	/**
	 * The raw channel name, could be a special mode message eg +#channel that
	 * only goes to voiced users.
	 */
	protected final String channelSource;
	
	/**
	 * The user hostmask who sent the message.
	 */
	protected final UserHostmask userHostmask;
	
	/**
	 * The user who sent the message.
	 */
	protected final User user;
	
	/**
	 * The actual message sent to the channel.
	 */
	protected final String message;
	
	/**
	 * The IrcV3 tags
	 */
	protected final ImmutableMap<String, String> v3Tags;

	public MessageEvent(PircBotX bot, @NonNull Channel channel, @NonNull String channelSource, @NonNull UserHostmask userHostmask, User user, @NonNull String message, ImmutableMap<String, String> v3Tags) {
		super(bot);
		if (channel == null) {
			throw new java.lang.NullPointerException("channel");
		}
		if (channelSource == null) {
			throw new java.lang.NullPointerException("channelSource");
		}
		if (userHostmask == null) {
			throw new java.lang.NullPointerException("userHostmask");
		}
		if (message == null) {
			throw new java.lang.NullPointerException("message");
		}
		this.channel = channel;
		this.channelSource = channelSource;
		this.userHostmask = userHostmask;
		this.user = user;
		this.message = message;
		this.v3Tags = v3Tags;
	}

	/**
	 * Respond with a channel message in <code>user: message</code> format to
	 * the user that sent the message
	 *
	 * @param response The response to send
	 */
	@Override
	public void respond(String response) {
		getBot().sendIRC().message(channelSource, getUser().getNick() + ": " + response);
	}

	/**
	 * Respond with a message to the channel without the prefix
	 *
	 * @param response The response to send
	 */
	public void respondChannel(String response) {
		if (getChannel() == null) throw new RuntimeException("Event does not contain a channel");
		getBot().sendIRC().message(channelSource, response);
	}

	/**
	 * Respond with a PM directly to the user
	 *
	 * @param response The response to send
	 */
	@Override
	public void respondPrivateMessage(String response) {
		getUser().send().message(response);
	}

	/**
	 * The raw channel name, could be a special mode message eg +#channel that
	 * only goes to voiced users.
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public String getChannelSource() {
		return this.channelSource;
	}

	/**
	 * The IrcV3 tags
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public ImmutableMap<String, String> getV3Tags() {
		return this.v3Tags;
	}

	@java.lang.Override
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public java.lang.String toString() {
		return "MessageEvent(channel=" + this.getChannel() + ", channelSource=" + this.getChannelSource() + ", userHostmask=" + this.getUserHostmask() + ", user=" + this.getUser() + ", message=" + this.getMessage() + ", v3Tags=" + this.getV3Tags() + ")";
	}

	@java.lang.Override
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public boolean equals(final java.lang.Object o) {
		if (o == this) return true;
		if (!(o instanceof MessageEvent)) return false;
		final MessageEvent other = (MessageEvent)o;
		if (!other.canEqual((java.lang.Object)this)) return false;
		if (!super.equals(o)) return false;
		final java.lang.Object this$channel = this.getChannel();
		final java.lang.Object other$channel = other.getChannel();
		if (this$channel == null ? other$channel != null : !this$channel.equals(other$channel)) return false;
		final java.lang.Object this$channelSource = this.getChannelSource();
		final java.lang.Object other$channelSource = other.getChannelSource();
		if (this$channelSource == null ? other$channelSource != null : !this$channelSource.equals(other$channelSource)) return false;
		final java.lang.Object this$userHostmask = this.getUserHostmask();
		final java.lang.Object other$userHostmask = other.getUserHostmask();
		if (this$userHostmask == null ? other$userHostmask != null : !this$userHostmask.equals(other$userHostmask)) return false;
		final java.lang.Object this$user = this.getUser();
		final java.lang.Object other$user = other.getUser();
		if (this$user == null ? other$user != null : !this$user.equals(other$user)) return false;
		final java.lang.Object this$message = this.getMessage();
		final java.lang.Object other$message = other.getMessage();
		if (this$message == null ? other$message != null : !this$message.equals(other$message)) return false;
		final java.lang.Object this$v3Tags = this.getV3Tags();
		final java.lang.Object other$v3Tags = other.getV3Tags();
		if (this$v3Tags == null ? other$v3Tags != null : !this$v3Tags.equals(other$v3Tags)) return false;
		return true;
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	protected boolean canEqual(final java.lang.Object other) {
		return other instanceof MessageEvent;
	}

	@java.lang.Override
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public int hashCode() {
		final int PRIME = 59;
		int result = 1;
		result = result * PRIME + super.hashCode();
		final java.lang.Object $channel = this.getChannel();
		result = result * PRIME + ($channel == null ? 0 : $channel.hashCode());
		final java.lang.Object $channelSource = this.getChannelSource();
		result = result * PRIME + ($channelSource == null ? 0 : $channelSource.hashCode());
		final java.lang.Object $userHostmask = this.getUserHostmask();
		result = result * PRIME + ($userHostmask == null ? 0 : $userHostmask.hashCode());
		final java.lang.Object $user = this.getUser();
		result = result * PRIME + ($user == null ? 0 : $user.hashCode());
		final java.lang.Object $message = this.getMessage();
		result = result * PRIME + ($message == null ? 0 : $message.hashCode());
		final java.lang.Object $v3Tags = this.getV3Tags();
		result = result * PRIME + ($v3Tags == null ? 0 : $v3Tags.hashCode());
		return result;
	}

	/**
	 * The channel to which the message was sent.
	 */
	@Override
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public Channel getChannel() {
		return this.channel;
	}

	/**
	 * The user hostmask who sent the message.
	 */
	@Override
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public UserHostmask getUserHostmask() {
		return this.userHostmask;
	}

	/**
	 * The user who sent the message.
	 */
	@Override
	@Nullable
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public User getUser() {
		return this.user;
	}

	/**
	 * The actual message sent to the channel.
	 */
	@Override
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public String getMessage() {
		return this.message;
	}
}