// Generated by delombok at Sun Jul 12 21:25:30 UTC 2015
/**
 * Copyright (C) 2010-2014 Leon Blakey <lord.quackstar at gmail.com>
 *
 * This file is part of PircBotX.
 *
 * PircBotX is free software: you can redistribute it and/or modify it under the
 * terms of the GNU General Public License as published by the Free Software
 * Foundation, either version 3 of the License, or (at your option) any later
 * version.
 *
 * PircBotX is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE. See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with
 * PircBotX. If not, see <http://www.gnu.org/licenses/>.
 */
package org.pircbotx.hooks.events;

import com.google.common.collect.ImmutableList;
import javax.annotation.Nullable;
import lombok.NonNull;
import org.pircbotx.PircBotX;
import org.pircbotx.hooks.Event;

/**
 * Dispatched when we receive a completed Whois request. Note this is completely
 * independent of User and Channel objects since a user might not be connected
 * to us directly
 *
 * @author Leon Blakey
 */
public class WhoisEvent extends Event {
	@NonNull
	protected final String nick;
	@NonNull
	protected final String login;
	@NonNull
	protected final String hostname;
	@NonNull
	protected final String realname;
	@NonNull
	protected final ImmutableList<String> channels;
	@NonNull
	protected final String server;
	@NonNull
	protected final String serverInfo;
	protected final long idleSeconds;
	protected final long signOnTime;
	
	/**
	 * If registered, the users nickserv account or if the server doesn't send
	 * the account an empty string, or if the user isn't registered at all,
	 * null.
	 */
	protected final String registeredAs;
	protected final boolean exists;
	protected final String awayMessage;

	WhoisEvent(PircBotX bot, @NonNull Builder builder) {
		super(bot);
		if (builder == null) {
			throw new java.lang.NullPointerException("builder");
		}
		this.nick = builder.nick;
		this.login = builder.login;
		this.hostname = builder.hostname;
		this.realname = builder.realname;
		this.channels = builder.channels;
		this.server = builder.server;
		this.serverInfo = builder.serverInfo;
		this.idleSeconds = builder.idleSeconds;
		this.signOnTime = builder.signOnTime;
		this.registeredAs = builder.registeredAs;
		this.exists = builder.exists;
		this.awayMessage = builder.awayMessage;
	}

	public static Builder builder() {
		return new Builder().channels(ImmutableList.<String>of());
	}

	/**
	 * Check if user is registered
	 *
	 * @return True if user is registered
	 * @see #getRegisteredAs()
	 */
	public boolean isRegistered() {
		return registeredAs != null;
	}

	@Override
	public void respond(String response) {
		getBot().sendIRC().message(getNick(), response);
	}

	/**
	 * Internal class to allow data to be collected over multiple lines
	 */
	public static class Builder {
		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		private String nick;
		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		private String login;
		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		private String hostname;
		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		private String realname;
		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		private ImmutableList<String> channels;
		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		private String server;
		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		private String serverInfo;
		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		private long idleSeconds;
		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		private long signOnTime;
		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		private String registeredAs;
		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		private boolean exists;
		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		private String awayMessage;

		public WhoisEvent generateEvent(PircBotX bot) {
			return new WhoisEvent(bot, this);
		}

		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		Builder() {
		}

		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public Builder nick(final String nick) {
			this.nick = nick;
			return this;
		}

		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public Builder login(final String login) {
			this.login = login;
			return this;
		}

		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public Builder hostname(final String hostname) {
			this.hostname = hostname;
			return this;
		}

		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public Builder realname(final String realname) {
			this.realname = realname;
			return this;
		}

		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public Builder channels(final ImmutableList<String> channels) {
			this.channels = channels;
			return this;
		}

		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public Builder server(final String server) {
			this.server = server;
			return this;
		}

		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public Builder serverInfo(final String serverInfo) {
			this.serverInfo = serverInfo;
			return this;
		}

		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public Builder idleSeconds(final long idleSeconds) {
			this.idleSeconds = idleSeconds;
			return this;
		}

		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public Builder signOnTime(final long signOnTime) {
			this.signOnTime = signOnTime;
			return this;
		}

		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public Builder registeredAs(final String registeredAs) {
			this.registeredAs = registeredAs;
			return this;
		}

		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public Builder exists(final boolean exists) {
			this.exists = exists;
			return this;
		}

		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public Builder awayMessage(final String awayMessage) {
			this.awayMessage = awayMessage;
			return this;
		}

		@java.lang.Override
		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public java.lang.String toString() {
			return "WhoisEvent.Builder(nick=" + this.nick + ", login=" + this.login + ", hostname=" + this.hostname + ", realname=" + this.realname + ", channels=" + this.channels + ", server=" + this.server + ", serverInfo=" + this.serverInfo + ", idleSeconds=" + this.idleSeconds + ", signOnTime=" + this.signOnTime + ", registeredAs=" + this.registeredAs + ", exists=" + this.exists + ", awayMessage=" + this.awayMessage + ")";
		}
	}

	@java.lang.Override
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public boolean equals(final java.lang.Object o) {
		if (o == this) return true;
		if (!(o instanceof WhoisEvent)) return false;
		final WhoisEvent other = (WhoisEvent)o;
		if (!other.canEqual((java.lang.Object)this)) return false;
		if (!super.equals(o)) return false;
		final java.lang.Object this$nick = this.getNick();
		final java.lang.Object other$nick = other.getNick();
		if (this$nick == null ? other$nick != null : !this$nick.equals(other$nick)) return false;
		final java.lang.Object this$login = this.getLogin();
		final java.lang.Object other$login = other.getLogin();
		if (this$login == null ? other$login != null : !this$login.equals(other$login)) return false;
		final java.lang.Object this$hostname = this.getHostname();
		final java.lang.Object other$hostname = other.getHostname();
		if (this$hostname == null ? other$hostname != null : !this$hostname.equals(other$hostname)) return false;
		final java.lang.Object this$realname = this.getRealname();
		final java.lang.Object other$realname = other.getRealname();
		if (this$realname == null ? other$realname != null : !this$realname.equals(other$realname)) return false;
		final java.lang.Object this$channels = this.getChannels();
		final java.lang.Object other$channels = other.getChannels();
		if (this$channels == null ? other$channels != null : !this$channels.equals(other$channels)) return false;
		final java.lang.Object this$server = this.getServer();
		final java.lang.Object other$server = other.getServer();
		if (this$server == null ? other$server != null : !this$server.equals(other$server)) return false;
		final java.lang.Object this$serverInfo = this.getServerInfo();
		final java.lang.Object other$serverInfo = other.getServerInfo();
		if (this$serverInfo == null ? other$serverInfo != null : !this$serverInfo.equals(other$serverInfo)) return false;
		if (this.getIdleSeconds() != other.getIdleSeconds()) return false;
		if (this.getSignOnTime() != other.getSignOnTime()) return false;
		final java.lang.Object this$registeredAs = this.getRegisteredAs();
		final java.lang.Object other$registeredAs = other.getRegisteredAs();
		if (this$registeredAs == null ? other$registeredAs != null : !this$registeredAs.equals(other$registeredAs)) return false;
		if (this.isExists() != other.isExists()) return false;
		final java.lang.Object this$awayMessage = this.getAwayMessage();
		final java.lang.Object other$awayMessage = other.getAwayMessage();
		if (this$awayMessage == null ? other$awayMessage != null : !this$awayMessage.equals(other$awayMessage)) return false;
		return true;
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	protected boolean canEqual(final java.lang.Object other) {
		return other instanceof WhoisEvent;
	}

	@java.lang.Override
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public int hashCode() {
		final int PRIME = 59;
		int result = 1;
		result = result * PRIME + super.hashCode();
		final java.lang.Object $nick = this.getNick();
		result = result * PRIME + ($nick == null ? 0 : $nick.hashCode());
		final java.lang.Object $login = this.getLogin();
		result = result * PRIME + ($login == null ? 0 : $login.hashCode());
		final java.lang.Object $hostname = this.getHostname();
		result = result * PRIME + ($hostname == null ? 0 : $hostname.hashCode());
		final java.lang.Object $realname = this.getRealname();
		result = result * PRIME + ($realname == null ? 0 : $realname.hashCode());
		final java.lang.Object $channels = this.getChannels();
		result = result * PRIME + ($channels == null ? 0 : $channels.hashCode());
		final java.lang.Object $server = this.getServer();
		result = result * PRIME + ($server == null ? 0 : $server.hashCode());
		final java.lang.Object $serverInfo = this.getServerInfo();
		result = result * PRIME + ($serverInfo == null ? 0 : $serverInfo.hashCode());
		final long $idleSeconds = this.getIdleSeconds();
		result = result * PRIME + (int)($idleSeconds >>> 32 ^ $idleSeconds);
		final long $signOnTime = this.getSignOnTime();
		result = result * PRIME + (int)($signOnTime >>> 32 ^ $signOnTime);
		final java.lang.Object $registeredAs = this.getRegisteredAs();
		result = result * PRIME + ($registeredAs == null ? 0 : $registeredAs.hashCode());
		result = result * PRIME + (this.isExists() ? 79 : 97);
		final java.lang.Object $awayMessage = this.getAwayMessage();
		result = result * PRIME + ($awayMessage == null ? 0 : $awayMessage.hashCode());
		return result;
	}

	@NonNull
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public String getNick() {
		return this.nick;
	}

	@NonNull
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public String getLogin() {
		return this.login;
	}

	@NonNull
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public String getHostname() {
		return this.hostname;
	}

	@NonNull
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public String getRealname() {
		return this.realname;
	}

	@NonNull
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public ImmutableList<String> getChannels() {
		return this.channels;
	}

	@NonNull
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public String getServer() {
		return this.server;
	}

	@NonNull
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public String getServerInfo() {
		return this.serverInfo;
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public long getIdleSeconds() {
		return this.idleSeconds;
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public long getSignOnTime() {
		return this.signOnTime;
	}

	/**
	 * If registered, the users nickserv account or if the server doesn't send
	 * the account an empty string, or if the user isn't registered at all,
	 * null.
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public String getRegisteredAs() {
		return this.registeredAs;
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public boolean isExists() {
		return this.exists;
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public String getAwayMessage() {
		return this.awayMessage;
	}
}