// Generated by delombok at Sun Jul 12 21:25:30 UTC 2015
/**
 * Copyright (C) 2010-2014 Leon Blakey <lord.quackstar at gmail.com>
 *
 * This file is part of PircBotX.
 *
 * PircBotX is free software: you can redistribute it and/or modify it under the
 * terms of the GNU General Public License as published by the Free Software
 * Foundation, either version 3 of the License, or (at your option) any later
 * version.
 *
 * PircBotX is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE. See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with
 * PircBotX. If not, see <http://www.gnu.org/licenses/>.
 */
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.pircbotx.hooks.events;

import com.google.common.collect.ImmutableList;
import org.pircbotx.Channel;
import org.pircbotx.PircBotX;
import org.pircbotx.UserHostmask;
import org.pircbotx.hooks.Event;
import org.pircbotx.hooks.types.GenericChannelEvent;

/**
 * @author Leon Blakey
 */
public class BanListEvent extends Event implements GenericChannelEvent {
	private final Channel channel;
	private final ImmutableList<Entry> entries;

	public BanListEvent(PircBotX bot, Channel channel, ImmutableList<Entry> entries) {
		super(bot);
		this.channel = channel;
		this.entries = entries;
	}

	/**
	 * Send a message to the channel
	 *
	 * @param response
	 */
	@Override
	public void respond(String response) {
		channel.send().message(response);
	}

	public static class Entry {
		private final UserHostmask recipient;
		private final UserHostmask source;
		private final long time;

		@java.beans.ConstructorProperties({"recipient", "source", "time"})
		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public Entry(final UserHostmask recipient, final UserHostmask source, final long time) {
			this.recipient = recipient;
			this.source = source;
			this.time = time;
		}

		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public UserHostmask getRecipient() {
			return this.recipient;
		}

		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public UserHostmask getSource() {
			return this.source;
		}

		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public long getTime() {
			return this.time;
		}

		@java.lang.Override
		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public boolean equals(final java.lang.Object o) {
			if (o == this) return true;
			if (!(o instanceof BanListEvent.Entry)) return false;
			final Entry other = (Entry)o;
			if (!other.canEqual((java.lang.Object)this)) return false;
			final java.lang.Object this$recipient = this.getRecipient();
			final java.lang.Object other$recipient = other.getRecipient();
			if (this$recipient == null ? other$recipient != null : !this$recipient.equals(other$recipient)) return false;
			final java.lang.Object this$source = this.getSource();
			final java.lang.Object other$source = other.getSource();
			if (this$source == null ? other$source != null : !this$source.equals(other$source)) return false;
			if (this.getTime() != other.getTime()) return false;
			return true;
		}

		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		protected boolean canEqual(final java.lang.Object other) {
			return other instanceof BanListEvent.Entry;
		}

		@java.lang.Override
		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public int hashCode() {
			final int PRIME = 59;
			int result = 1;
			final java.lang.Object $recipient = this.getRecipient();
			result = result * PRIME + ($recipient == null ? 0 : $recipient.hashCode());
			final java.lang.Object $source = this.getSource();
			result = result * PRIME + ($source == null ? 0 : $source.hashCode());
			final long $time = this.getTime();
			result = result * PRIME + (int)($time >>> 32 ^ $time);
			return result;
		}

		@java.lang.Override
		@java.lang.SuppressWarnings("all")
		@javax.annotation.Generated("lombok")
		public java.lang.String toString() {
			return "BanListEvent.Entry(recipient=" + this.getRecipient() + ", source=" + this.getSource() + ", time=" + this.getTime() + ")";
		}
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public ImmutableList<Entry> getEntries() {
		return this.entries;
	}

	@java.lang.Override
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public java.lang.String toString() {
		return "BanListEvent(channel=" + this.getChannel() + ", entries=" + this.getEntries() + ")";
	}

	@java.lang.Override
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public boolean equals(final java.lang.Object o) {
		if (o == this) return true;
		if (!(o instanceof BanListEvent)) return false;
		final BanListEvent other = (BanListEvent)o;
		if (!other.canEqual((java.lang.Object)this)) return false;
		if (!super.equals(o)) return false;
		final java.lang.Object this$channel = this.getChannel();
		final java.lang.Object other$channel = other.getChannel();
		if (this$channel == null ? other$channel != null : !this$channel.equals(other$channel)) return false;
		final java.lang.Object this$entries = this.getEntries();
		final java.lang.Object other$entries = other.getEntries();
		if (this$entries == null ? other$entries != null : !this$entries.equals(other$entries)) return false;
		return true;
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	protected boolean canEqual(final java.lang.Object other) {
		return other instanceof BanListEvent;
	}

	@java.lang.Override
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public int hashCode() {
		final int PRIME = 59;
		int result = 1;
		result = result * PRIME + super.hashCode();
		final java.lang.Object $channel = this.getChannel();
		result = result * PRIME + ($channel == null ? 0 : $channel.hashCode());
		final java.lang.Object $entries = this.getEntries();
		result = result * PRIME + ($entries == null ? 0 : $entries.hashCode());
		return result;
	}

	@Override
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public Channel getChannel() {
		return this.channel;
	}
}