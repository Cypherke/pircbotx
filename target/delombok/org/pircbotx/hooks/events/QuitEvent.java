// Generated by delombok at Sun Jul 12 21:25:30 UTC 2015
/**
 * Copyright (C) 2010-2014 Leon Blakey <lord.quackstar at gmail.com>
 *
 * This file is part of PircBotX.
 *
 * PircBotX is free software: you can redistribute it and/or modify it under the
 * terms of the GNU General Public License as published by the Free Software
 * Foundation, either version 3 of the License, or (at your option) any later
 * version.
 *
 * PircBotX is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE. See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with
 * PircBotX. If not, see <http://www.gnu.org/licenses/>.
 */
package org.pircbotx.hooks.events;

import javax.annotation.Nullable;
import lombok.NonNull;
import org.pircbotx.hooks.Event;
import org.pircbotx.PircBotX;
import org.pircbotx.UserHostmask;
import org.pircbotx.hooks.types.GenericSnapshotEvent;
import org.pircbotx.hooks.types.GenericUserEvent;
import org.pircbotx.snapshot.UserChannelDaoSnapshot;
import org.pircbotx.snapshot.UserSnapshot;

/**
 * This event is dispatched whenever someone (possibly us) quits from the
 * server. We will only observe this if the user was in one of the channels to
 * which we are connected.
 *
 * @author Leon Blakey
 */
public class QuitEvent extends Event implements GenericUserEvent, GenericSnapshotEvent {
	protected final UserChannelDaoSnapshot userChannelDaoSnapshot;
	protected final UserHostmask userHostmask;
	
	/**
	 * Snapshot of the user as of before the user quit.
	 */
	protected final UserSnapshot user;
	
	/**
	 * The reason the user quit from the server.
	 */
	protected final String reason;

	public QuitEvent(PircBotX bot, UserChannelDaoSnapshot userChannelDaoSnapshot, @NonNull UserHostmask userHostmask, UserSnapshot user, @NonNull String reason) {
		super(bot);
		if (userHostmask == null) {
			throw new java.lang.NullPointerException("userHostmask");
		}
		if (reason == null) {
			throw new java.lang.NullPointerException("reason");
		}
		this.userChannelDaoSnapshot = userChannelDaoSnapshot;
		this.userHostmask = userHostmask;
		this.user = user;
		this.reason = reason;
	}

	/**
	 * @see #getUserChannelDaoSnapshot()
	 * @see GenericSnapshotEvent
	 * @deprecated Use {@link #getUserChannelDaoSnapshot() } from
	 * {@link GenericSnapshotEvent}
	 */
	@Deprecated
	public UserChannelDaoSnapshot getDaoSnapshot() {
		return userChannelDaoSnapshot;
	}

	/**
	 * Does NOT respond! This will throw an
	 * {@link UnsupportedOperationException} since we can't respond to a user
	 * that just quit
	 *
	 * @param response The response to send
	 */
	@Override
	@Deprecated
	public void respond(String response) {
		throw new UnsupportedOperationException("Attempting to respond to a user that quit");
	}

	/**
	 * The reason the user quit from the server.
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public String getReason() {
		return this.reason;
	}

	@java.lang.Override
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public java.lang.String toString() {
		return "QuitEvent(userChannelDaoSnapshot=" + this.getUserChannelDaoSnapshot() + ", userHostmask=" + this.getUserHostmask() + ", user=" + this.getUser() + ", reason=" + this.getReason() + ")";
	}

	@java.lang.Override
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public boolean equals(final java.lang.Object o) {
		if (o == this) return true;
		if (!(o instanceof QuitEvent)) return false;
		final QuitEvent other = (QuitEvent)o;
		if (!other.canEqual((java.lang.Object)this)) return false;
		if (!super.equals(o)) return false;
		final java.lang.Object this$userChannelDaoSnapshot = this.getUserChannelDaoSnapshot();
		final java.lang.Object other$userChannelDaoSnapshot = other.getUserChannelDaoSnapshot();
		if (this$userChannelDaoSnapshot == null ? other$userChannelDaoSnapshot != null : !this$userChannelDaoSnapshot.equals(other$userChannelDaoSnapshot)) return false;
		final java.lang.Object this$userHostmask = this.getUserHostmask();
		final java.lang.Object other$userHostmask = other.getUserHostmask();
		if (this$userHostmask == null ? other$userHostmask != null : !this$userHostmask.equals(other$userHostmask)) return false;
		final java.lang.Object this$user = this.getUser();
		final java.lang.Object other$user = other.getUser();
		if (this$user == null ? other$user != null : !this$user.equals(other$user)) return false;
		final java.lang.Object this$reason = this.getReason();
		final java.lang.Object other$reason = other.getReason();
		if (this$reason == null ? other$reason != null : !this$reason.equals(other$reason)) return false;
		return true;
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	protected boolean canEqual(final java.lang.Object other) {
		return other instanceof QuitEvent;
	}

	@java.lang.Override
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public int hashCode() {
		final int PRIME = 59;
		int result = 1;
		result = result * PRIME + super.hashCode();
		final java.lang.Object $userChannelDaoSnapshot = this.getUserChannelDaoSnapshot();
		result = result * PRIME + ($userChannelDaoSnapshot == null ? 0 : $userChannelDaoSnapshot.hashCode());
		final java.lang.Object $userHostmask = this.getUserHostmask();
		result = result * PRIME + ($userHostmask == null ? 0 : $userHostmask.hashCode());
		final java.lang.Object $user = this.getUser();
		result = result * PRIME + ($user == null ? 0 : $user.hashCode());
		final java.lang.Object $reason = this.getReason();
		result = result * PRIME + ($reason == null ? 0 : $reason.hashCode());
		return result;
	}

	@Override
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public UserChannelDaoSnapshot getUserChannelDaoSnapshot() {
		return this.userChannelDaoSnapshot;
	}

	@Override
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public UserHostmask getUserHostmask() {
		return this.userHostmask;
	}

	/**
	 * Snapshot of the user as of before the user quit.
	 */
	@Override
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public UserSnapshot getUser() {
		return this.user;
	}
}