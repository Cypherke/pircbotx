// Generated by delombok at Sun Jul 12 21:25:30 UTC 2015
/**
 * Copyright (C) 2010-2014 Leon Blakey <lord.quackstar at gmail.com>
 *
 * This file is part of PircBotX.
 *
 * PircBotX is free software: you can redistribute it and/or modify it under the
 * terms of the GNU General Public License as published by the Free Software
 * Foundation, either version 3 of the License, or (at your option) any later
 * version.
 *
 * PircBotX is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE. See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with
 * PircBotX. If not, see <http://www.gnu.org/licenses/>.
 */
package org.pircbotx.hooks.events;

import javax.annotation.Nullable;
import org.pircbotx.hooks.Event;
import org.pircbotx.PircBotX;
import org.pircbotx.hooks.types.GenericSnapshotEvent;
import org.pircbotx.snapshot.UserChannelDaoSnapshot;

/**
 * This event is dispatched when we get disconnected. It is meant for the bot to
 * carry out actions upon disconnection. This may happen if the PircBotX quits
 * from the server, or if the connection is unexpectedly lost.
 * <p>
 * Disconnection from the IRC server is detected immediately if either we or the
 * server close the connection normally. If the connection to the server is
 * lost, but neither we nor the server have explicitly closed the connection,
 * then it may take a few minutes to detect (this is commonly referred to as a
 * "ping timeout").
 *
 * @author Leon Blakey
 */
public class DisconnectEvent extends Event implements GenericSnapshotEvent {
	protected final UserChannelDaoSnapshot userChannelDaoSnapshot;
	
	/**
	 * Exception encountered during disconnection, if any
	 */
	protected final Exception disconnectException;

	public DisconnectEvent(PircBotX bot, UserChannelDaoSnapshot userChannelDaoSnapshot, Exception disconnectException) {
		super(bot);
		this.userChannelDaoSnapshot = userChannelDaoSnapshot;
		this.disconnectException = disconnectException;
	}

	/**
	 * @see #getUserChannelDaoSnapshot()
	 * @see GenericSnapshotEvent
	 * @deprecated Use {@link #getUserChannelDaoSnapshot() } from
	 * {@link GenericSnapshotEvent}
	 */
	@Deprecated
	public UserChannelDaoSnapshot getDaoSnapshot() {
		return userChannelDaoSnapshot;
	}

	/**
	 * Does NOT respond to the server! This will throw an
	 * {@link UnsupportedOperationException} since we can't respond to a server
	 * we just disconnected from.
	 *
	 * @param response The response to send
	 */
	@Override
	@Deprecated
	public void respond(String response) {
		throw new UnsupportedOperationException("Attepting to respond to a disconnected server");
	}

	/**
	 * Exception encountered during disconnection, if any
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public Exception getDisconnectException() {
		return this.disconnectException;
	}

	@java.lang.Override
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public java.lang.String toString() {
		return "DisconnectEvent(userChannelDaoSnapshot=" + this.getUserChannelDaoSnapshot() + ", disconnectException=" + this.getDisconnectException() + ")";
	}

	@java.lang.Override
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public boolean equals(final java.lang.Object o) {
		if (o == this) return true;
		if (!(o instanceof DisconnectEvent)) return false;
		final DisconnectEvent other = (DisconnectEvent)o;
		if (!other.canEqual((java.lang.Object)this)) return false;
		if (!super.equals(o)) return false;
		final java.lang.Object this$userChannelDaoSnapshot = this.getUserChannelDaoSnapshot();
		final java.lang.Object other$userChannelDaoSnapshot = other.getUserChannelDaoSnapshot();
		if (this$userChannelDaoSnapshot == null ? other$userChannelDaoSnapshot != null : !this$userChannelDaoSnapshot.equals(other$userChannelDaoSnapshot)) return false;
		final java.lang.Object this$disconnectException = this.getDisconnectException();
		final java.lang.Object other$disconnectException = other.getDisconnectException();
		if (this$disconnectException == null ? other$disconnectException != null : !this$disconnectException.equals(other$disconnectException)) return false;
		return true;
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	protected boolean canEqual(final java.lang.Object other) {
		return other instanceof DisconnectEvent;
	}

	@java.lang.Override
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public int hashCode() {
		final int PRIME = 59;
		int result = 1;
		result = result * PRIME + super.hashCode();
		final java.lang.Object $userChannelDaoSnapshot = this.getUserChannelDaoSnapshot();
		result = result * PRIME + ($userChannelDaoSnapshot == null ? 0 : $userChannelDaoSnapshot.hashCode());
		final java.lang.Object $disconnectException = this.getDisconnectException();
		result = result * PRIME + ($disconnectException == null ? 0 : $disconnectException.hashCode());
		return result;
	}

	@Override
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public UserChannelDaoSnapshot getUserChannelDaoSnapshot() {
		return this.userChannelDaoSnapshot;
	}
}