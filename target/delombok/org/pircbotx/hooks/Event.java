// Generated by delombok at Sun Jul 12 21:25:30 UTC 2015
/**
 * Copyright (C) 2010-2014 Leon Blakey <lord.quackstar at gmail.com>
 *
 * This file is part of PircBotX.
 *
 * PircBotX is free software: you can redistribute it and/or modify it under the
 * terms of the GNU General Public License as published by the Free Software
 * Foundation, either version 3 of the License, or (at your option) any later
 * version.
 *
 * PircBotX is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE. See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with
 * PircBotX. If not, see <http://www.gnu.org/licenses/>.
 */
package org.pircbotx.hooks;

import com.google.common.collect.ComparisonChain;
import lombok.NonNull;
import org.pircbotx.PircBotX;
import org.pircbotx.hooks.managers.ListenerManager;
import org.pircbotx.hooks.types.GenericEvent;

/**
 * An event representing what was received from the IRC server.
 *
 * @author Leon Blakey
 */
public abstract class Event implements GenericEvent {
	
	/**
	 * Returns the timestamp of when the event was created.
	 */
	protected final long timestamp;
	
	/**
	 * Returns the {@link PircBotX} instance that this event originally came
	 * from.
	 *
	 * @return A {@link PircBotX} instance
	 */
	protected final PircBotX bot;
	
	/**
	 * Returns the id of this event. This id is guaranteed to be unique in the
	 * context of other events dispatched from the same listener manager.
	 */
	protected final long id;

	public Event(PircBotX bot) {
		this(bot, bot.getConfiguration().getListenerManager());
	}

	public Event(@NonNull PircBotX bot, @NonNull ListenerManager listenerManager) {
		if (bot == null) {
			throw new java.lang.NullPointerException("bot");
		}
		if (listenerManager == null) {
			throw new java.lang.NullPointerException("listenerManager");
		}
		this.timestamp = System.currentTimeMillis();
		this.bot = bot;
		this.id = listenerManager.incrementCurrentId();
	}

	/**
	 * A simple abstract method that all events must implement to respond to an
	 * event happening. All implementing classes should delegate to the
	 * sendMessage or other relevant methods in the main PircBotX class, not
	 * with custom lines and calls to the send() methods
	 *
	 * @param response The response to send
	 */
	public abstract void respond(String response);

	/**
	 * Compare events by {@link #getTimestamp()} and then {@link #getId()} to
	 * order by when they are received. This is useful for sorting lists of
	 * Channel objects.
	 *
	 * @param other Other Event to compare to
	 * @return the result of the comparison
	 */
	public int compareTo(Event other) {
		ComparisonChain comparison = ComparisonChain.start().compare(getTimestamp(), other.getTimestamp()).compare(getId(), other.getId());
		if (bot != null && other.getBot() != null) comparison.compare(bot.getBotId(), other.getBot().getBotId());
		return comparison.result();
	}

	@SuppressWarnings("unchecked")
	public <T extends PircBotX> T getBot() {
		return (T)bot;
	}

	/**
	 * Returns the timestamp of when the event was created.
	 *
	 * @return A timestamp as a long
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public long getTimestamp() {
		return this.timestamp;
	}

	/**
	 * Returns the id of this event. This id is guaranteed to be unique in the
	 * context of other events dispatched from the same listener manager.
	 *
	 * @return The id of this event
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public long getId() {
		return this.id;
	}

	@java.lang.Override
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public boolean equals(final java.lang.Object o) {
		if (o == this) return true;
		if (!(o instanceof Event)) return false;
		final Event other = (Event)o;
		if (!other.canEqual((java.lang.Object)this)) return false;
		if (this.getTimestamp() != other.getTimestamp()) return false;
		final java.lang.Object this$bot = this.getBot();
		final java.lang.Object other$bot = other.getBot();
		if (this$bot == null ? other$bot != null : !this$bot.equals(other$bot)) return false;
		if (this.getId() != other.getId()) return false;
		return true;
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	protected boolean canEqual(final java.lang.Object other) {
		return other instanceof Event;
	}

	@java.lang.Override
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public int hashCode() {
		final int PRIME = 59;
		int result = 1;
		final long $timestamp = this.getTimestamp();
		result = result * PRIME + (int)($timestamp >>> 32 ^ $timestamp);
		final java.lang.Object $bot = this.getBot();
		result = result * PRIME + ($bot == null ? 0 : $bot.hashCode());
		final long $id = this.getId();
		result = result * PRIME + (int)($id >>> 32 ^ $id);
		return result;
	}
}