// Generated by delombok at Sun Jul 12 21:25:30 UTC 2015
/**
 * Copyright (C) 2010-2014 Leon Blakey <lord.quackstar at gmail.com>
 *
 * This file is part of PircBotX.
 *
 * PircBotX is free software: you can redistribute it and/or modify it under the
 * terms of the GNU General Public License as published by the Free Software
 * Foundation, either version 3 of the License, or (at your option) any later
 * version.
 *
 * PircBotX is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE. See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with
 * PircBotX. If not, see <http://www.gnu.org/licenses/>.
 */
package org.pircbotx.hooks.events;

import javax.annotation.Nullable;
import lombok.NonNull;
import org.pircbotx.Channel;
import org.pircbotx.hooks.Event;
import org.pircbotx.PircBotX;
import org.pircbotx.UserHostmask;
import org.pircbotx.hooks.types.GenericChannelEvent;

/**
 * This event is dispatched whenever a user sets the topic, or when we join a
 * new channel and discovers its topic.
 *
 * @author Leon Blakey
 */
public class TopicEvent extends Event implements GenericChannelEvent {
	
	/**
	 * The channel that the topic belongs to.
	 */
	protected final Channel channel;
	
	/**
	 * If known, the old topic of the channel before it was changed.
	 */
	protected final String oldTopic;
	
	/**
	 * The topic for the channel.
	 */
	protected final String topic;
	
	/**
	 * The user that set the topic.
	 */
	protected final UserHostmask user;
	
	/**
	 * True if the topic has just been changed, false if the topic was already
	 * there.
	 */
	protected final boolean changed;
	
	/**
	 * When the topic was set (milliseconds since the epoch).
	 */
	protected final long date;

	public TopicEvent(PircBotX bot, @NonNull Channel channel, String oldTopic, @NonNull String topic, @NonNull UserHostmask user, long date, boolean changed) {
		super(bot);
		if (channel == null) {
			throw new java.lang.NullPointerException("channel");
		}
		if (topic == null) {
			throw new java.lang.NullPointerException("topic");
		}
		if (user == null) {
			throw new java.lang.NullPointerException("user");
		}
		this.channel = channel;
		this.oldTopic = oldTopic;
		this.topic = topic;
		this.user = user;
		this.changed = changed;
		this.date = date;
	}

	/**
	 * Respond with a channel message in <code>user: message</code> format to
	 * the user that set the message
	 *
	 * @param response The response to send
	 */
	@Override
	public void respond(String response) {
		getChannel().send().message(user, response);
	}

	/**
	 * If known, the old topic of the channel before it was changed.
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public String getOldTopic() {
		return this.oldTopic;
	}

	/**
	 * The topic for the channel.
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public String getTopic() {
		return this.topic;
	}

	/**
	 * The user that set the topic.
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public UserHostmask getUser() {
		return this.user;
	}

	/**
	 * True if the topic has just been changed, false if the topic was already
	 * there.
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public boolean isChanged() {
		return this.changed;
	}

	/**
	 * When the topic was set (milliseconds since the epoch).
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public long getDate() {
		return this.date;
	}

	@java.lang.Override
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public java.lang.String toString() {
		return "TopicEvent(channel=" + this.getChannel() + ", oldTopic=" + this.getOldTopic() + ", topic=" + this.getTopic() + ", user=" + this.getUser() + ", changed=" + this.isChanged() + ", date=" + this.getDate() + ")";
	}

	@java.lang.Override
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public boolean equals(final java.lang.Object o) {
		if (o == this) return true;
		if (!(o instanceof TopicEvent)) return false;
		final TopicEvent other = (TopicEvent)o;
		if (!other.canEqual((java.lang.Object)this)) return false;
		if (!super.equals(o)) return false;
		final java.lang.Object this$channel = this.getChannel();
		final java.lang.Object other$channel = other.getChannel();
		if (this$channel == null ? other$channel != null : !this$channel.equals(other$channel)) return false;
		final java.lang.Object this$oldTopic = this.getOldTopic();
		final java.lang.Object other$oldTopic = other.getOldTopic();
		if (this$oldTopic == null ? other$oldTopic != null : !this$oldTopic.equals(other$oldTopic)) return false;
		final java.lang.Object this$topic = this.getTopic();
		final java.lang.Object other$topic = other.getTopic();
		if (this$topic == null ? other$topic != null : !this$topic.equals(other$topic)) return false;
		final java.lang.Object this$user = this.getUser();
		final java.lang.Object other$user = other.getUser();
		if (this$user == null ? other$user != null : !this$user.equals(other$user)) return false;
		if (this.isChanged() != other.isChanged()) return false;
		if (this.getDate() != other.getDate()) return false;
		return true;
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	protected boolean canEqual(final java.lang.Object other) {
		return other instanceof TopicEvent;
	}

	@java.lang.Override
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public int hashCode() {
		final int PRIME = 59;
		int result = 1;
		result = result * PRIME + super.hashCode();
		final java.lang.Object $channel = this.getChannel();
		result = result * PRIME + ($channel == null ? 0 : $channel.hashCode());
		final java.lang.Object $oldTopic = this.getOldTopic();
		result = result * PRIME + ($oldTopic == null ? 0 : $oldTopic.hashCode());
		final java.lang.Object $topic = this.getTopic();
		result = result * PRIME + ($topic == null ? 0 : $topic.hashCode());
		final java.lang.Object $user = this.getUser();
		result = result * PRIME + ($user == null ? 0 : $user.hashCode());
		result = result * PRIME + (this.isChanged() ? 79 : 97);
		final long $date = this.getDate();
		result = result * PRIME + (int)($date >>> 32 ^ $date);
		return result;
	}

	/**
	 * The channel that the topic belongs to.
	 */
	@Override
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public Channel getChannel() {
		return this.channel;
	}
}