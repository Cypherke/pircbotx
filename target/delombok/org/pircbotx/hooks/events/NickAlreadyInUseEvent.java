// Generated by delombok at Sun Jul 12 21:25:30 UTC 2015
/**
 * Copyright (C) 2010-2014 Leon Blakey <lord.quackstar at gmail.com>
 *
 * This file is part of PircBotX.
 *
 * PircBotX is free software: you can redistribute it and/or modify it under the
 * terms of the GNU General Public License as published by the Free Software
 * Foundation, either version 3 of the License, or (at your option) any later
 * version.
 *
 * PircBotX is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE. See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with
 * PircBotX. If not, see <http://www.gnu.org/licenses/>.
 */
package org.pircbotx.hooks.events;

import javax.annotation.Nullable;
import lombok.NonNull;
import org.pircbotx.PircBotX;
import org.pircbotx.hooks.Event;

/**
 * A nick is already in use error from server. If auto nick change isn't
 * enabled, must send a nick before server disconnects us.
 *
 * @author Leon Blakey
 */
public class NickAlreadyInUseEvent extends Event {
	
	/**
	 * The nick already in use.
	 */
	protected final String usedNick;
	
	/**
	 * The auto changed nick, if any.
	 */
	protected final String autoNewNick;
	
	/**
	 * If auto nick change is enabled
	 */
	protected final boolean autoNickChange;

	public NickAlreadyInUseEvent(PircBotX bot, @NonNull String usedNick, @Nullable String autoNewNick, boolean autoNickChange) {
		super(bot);
		if (usedNick == null) {
			throw new java.lang.NullPointerException("usedNick");
		}
		this.usedNick = usedNick;
		this.autoNewNick = autoNewNick;
		this.autoNickChange = autoNickChange;
	}

	/**
	 * Respond by sending a <i>NICK</i> change
	 *
	 * @param newNick The nick to set
	 */
	@Override
	public void respond(@Nullable String newNick) {
		getBot().sendIRC().changeNick(newNick);
	}

	/**
	 * The nick already in use.
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public String getUsedNick() {
		return this.usedNick;
	}

	/**
	 * The auto changed nick, if any.
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public String getAutoNewNick() {
		return this.autoNewNick;
	}

	/**
	 * If auto nick change is enabled
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public boolean isAutoNickChange() {
		return this.autoNickChange;
	}

	@java.lang.Override
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public java.lang.String toString() {
		return "NickAlreadyInUseEvent(usedNick=" + this.getUsedNick() + ", autoNewNick=" + this.getAutoNewNick() + ", autoNickChange=" + this.isAutoNickChange() + ")";
	}

	@java.lang.Override
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public boolean equals(final java.lang.Object o) {
		if (o == this) return true;
		if (!(o instanceof NickAlreadyInUseEvent)) return false;
		final NickAlreadyInUseEvent other = (NickAlreadyInUseEvent)o;
		if (!other.canEqual((java.lang.Object)this)) return false;
		if (!super.equals(o)) return false;
		final java.lang.Object this$usedNick = this.getUsedNick();
		final java.lang.Object other$usedNick = other.getUsedNick();
		if (this$usedNick == null ? other$usedNick != null : !this$usedNick.equals(other$usedNick)) return false;
		final java.lang.Object this$autoNewNick = this.getAutoNewNick();
		final java.lang.Object other$autoNewNick = other.getAutoNewNick();
		if (this$autoNewNick == null ? other$autoNewNick != null : !this$autoNewNick.equals(other$autoNewNick)) return false;
		if (this.isAutoNickChange() != other.isAutoNickChange()) return false;
		return true;
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	protected boolean canEqual(final java.lang.Object other) {
		return other instanceof NickAlreadyInUseEvent;
	}

	@java.lang.Override
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public int hashCode() {
		final int PRIME = 59;
		int result = 1;
		result = result * PRIME + super.hashCode();
		final java.lang.Object $usedNick = this.getUsedNick();
		result = result * PRIME + ($usedNick == null ? 0 : $usedNick.hashCode());
		final java.lang.Object $autoNewNick = this.getAutoNewNick();
		result = result * PRIME + ($autoNewNick == null ? 0 : $autoNewNick.hashCode());
		result = result * PRIME + (this.isAutoNickChange() ? 79 : 97);
		return result;
	}
}